#!/bin/bash
set -e
source ${INVOICEPLANE_RUNTIME_DIR}/env-defaults

INVOICEPLANE_TEMPLATES_DIR=${INVOICEPLANE_RUNTIME_DIR}/config
INVOICEPLANE_CONFIG=${INVOICEPLANE_CONFIGS_DIR}/ipconfig.php
INVOICEPLANE_CODEIGNITER_CONFIG=${INVOICEPLANE_INSTALL_DIR}/application/config/config.php
INVOICEPLANE_NGINX_CONFIG=/etc/nginx/sites-enabled/InvoicePlane.conf

# Compares two version strings `a` and `b`
# Returns
#   - negative integer, if `a` is less than `b`
#   - 0, if `a` and `b` are equal
#   - non-negative integer, if `a` is greater than `b`
vercmp() {
  expr '(' "$1" : '\([^.]*\)' ')' '-' '(' "$2" : '\([^.]*\)' ')' '|' \
       '(' "$1.0" : '[^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0" : '[^.]*[.]\([^.]*\)' ')' '|' \
       '(' "$1.0.0" : '[^.]*[.][^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0.0" : '[^.]*[.][^.]*[.]\([^.]*\)' ')' '|' \
       '(' "$1.0.0.0" : '[^.]*[.][^.]*[.][^.]*[.]\([^.]*\)' ')' '-' '(' "$2.0.0.0" : '[^.]*[.][^.]*[.][^.]*[.]\([^.]*\)' ')'
}

# Read YAML file from Bash script
# Credits: https://gist.github.com/pkuczynski/8665367
parse_yaml() {
   local prefix=$2
   local s='[[:space:]]*' w='[a-zA-Z0-9_]*' fs=$(echo @|tr @ '\034')
   sed -ne "s|^\($s\)\($w\)$s:$s\"\(.*\)\"$s\$|\1$fs\2$fs\3|p" \
        -e "s|^\($s\)\($w\)$s:$s\(.*\)$s\$|\1$fs\2$fs\3|p" $1 |
   awk -F$fs '{
      indent = length($1)/2;
      vname[indent] = $2;
      for (i in vname) {if (i > indent) {delete vname[i]}}
      if (length($3) > 0) {
         vn=""; for (i=0; i<indent; i++) {vn=(vn)(vname[i])("_")}
         printf("%s%s%s=\"%s\"\n", "'$prefix'",vn, $2, $3);
      }
   }'
}

## Execute a command as OWNCLOUD_USER
exec_as_invoiceplane() {
  if [[ $(whoami) == ${INVOICEPLANE_USER} ]]; then
    $@
  else
    sudo -HEu ${INVOICEPLANE_USER} "$@"
  fi
}

## Copies configuration template in ${INVOICEPLANE_TEMPLATES_DIR} to the destination as the specified USER
# $1: ownership of destination file, uses `chown`
# $2: source file
# $3: destination location
# $4: mode of destination, uses `chmod` (default: 0644)
install_template() {
  local OWNERSHIP=${1}
  local SRC=${2}
  local DEST=${3}
  local MODE=${4:-0644}
  if [[ -f ${INVOICEPLANE_TEMPLATES_DIR}/${SRC} ]]; then
    cp ${INVOICEPLANE_TEMPLATES_DIR}/${SRC} ${DEST}
  fi
  chmod ${MODE} ${DEST}
  chown ${OWNERSHIP} ${DEST}
}

## Replace placeholders with values
# $1: file with placeholders to replace
# $x: placeholders to replace
update_template() {
  local FILE=${1?missing argument}
  shift

  [[ ! -f ${FILE} ]] && return 1

  local VARIABLES=($@)
  local USR=$(stat -c %U ${FILE})
  local tmp_file=$(mktemp)
  cp -a "${FILE}" ${tmp_file}

  local variable
  for variable in ${VARIABLES[@]}; do
    # Keep the compatibilty: {{VAR}} => ${VAR}
    sed -ri "s/[{]{2}$variable[}]{2}/\${$variable}/g" ${tmp_file}
  done

  # Replace placeholders
  (
    export ${VARIABLES[@]}
    local IFS=":"; sudo -HEu ${USR} envsubst "${VARIABLES[*]/#/$}" < ${tmp_file} > ${FILE}
  )
  rm -f ${tmp_file}
}

invoiceplane_get_param() {
  local key=${1?missing argument}
  exec_as_invoiceplane sed -n -e "s/^\([ ]*\)\(${key}[ ]*=[ ]*\)\([^ ]*\)\(.*\)$/\3/p" ${INVOICEPLANE_CONFIG}
}

invoiceplane_set_param() {
  local key=${1?missing argument}
  local value=${2?missing argument}
  local hide=${3}
  if [[ -n ${value} ]]; then
    local current=$(invoiceplane_get_param ${key})
    if [[ "${current}" != "${value}" ]]; then
      case ${hide} in
        true)  echo "‣ Setting ipconfig.php parameter: ${key}" ;;
        *) echo "‣ Setting ipconfig.php parameter: ${key} = '${value}'" ;;
      esac
      value="$(echo "${value}" | sed 's|[&]|\\&|g')"
      exec_as_invoiceplane sed -i "s|^${key}=.*|${key}=${value}|" ${INVOICEPLANE_CONFIG}
    fi
  fi
}

invoiceplane_finalize_database_parameters() {
  # is a mysql container linked?
  if [[ -n ${MYSQL_PORT_3306_TCP_ADDR} ]]; then
    DB_TYPE=${DB_TYPE:-mysqli}
    DB_HOST=${DB_HOST:-$MYSQL_PORT_3306_TCP_ADDR}
    DB_PORT=${DB_PORT:-$MYSQL_PORT_3306_TCP_PORT}

    # support for linked sameersbn/mysql image
    DB_USER=${DB_USER:-$MYSQL_ENV_DB_USER}
    DB_PASS=${DB_PASS:-$MYSQL_ENV_DB_PASS}
    DB_NAME=${DB_NAME:-$MYSQL_ENV_DB_NAME}

    # support for linked orchardup/mysql and enturylink/mysql image
    # also supports official mysql image
    DB_USER=${DB_USER:-$MYSQL_ENV_MYSQL_USER}
    DB_PASS=${DB_PASS:-$MYSQL_ENV_MYSQL_PASSWORD}
    DB_NAME=${DB_NAME:-$MYSQL_ENV_MYSQL_DATABASE}
  fi

  # set default port, user and database
  DB_PORT=${DB_PORT:-3306}
  DB_USER=${DB_USER:-root}
  DB_NAME=${DB_NAME:-invoiceplane_db}

  if [[ -z ${DB_HOST} ]]; then
    echo
    echo "ERROR: "
    echo "  Please configure the database connection."
    echo "  Cannot continue without a database. Aborting..."
    echo
    return 1
  fi
}

invoiceplane_check_database_connection() {
  prog="mysqladmin -h ${DB_HOST} -P ${DB_PORT} -u ${DB_USER} ${DB_PASS:+-p$DB_PASS} status"
  timeout=60
  while ! ${prog} >/dev/null 2>&1
  do
    timeout=$(expr $timeout - 1)
    if [[ $timeout -eq 0 ]]; then
      echo
      echo "Could not connect to database server. Aborting..."
      return 1
    fi
    echo -n "."
    sleep 1
  done
  echo
}

invoiceplane_finalize_php_fpm_parameters() {
  # is a invoiceplane-php-fpm container linked?
  if [[ -n ${PHP_FPM_PORT_9000_TCP_ADDR} ]]; then
    INVOICEPLANE_PHP_FPM_HOST=${INVOICEPLANE_PHP_FPM_HOST:-$PHP_FPM_PORT_9000_TCP_ADDR}
    INVOICEPLANE_PHP_FPM_PORT=${INVOICEPLANE_PHP_FPM_PORT:-$PHP_FPM_PORT_9000_TCP_PORT}
  fi

  if [[ -z ${INVOICEPLANE_PHP_FPM_HOST} ]]; then
    echo
    echo "ERROR: "
    echo "  Please configure the php-fpm connection. Aborting..."
    echo
    return 1
  fi

  # use default php-fpm port number if it is still not set
  INVOICEPLANE_PHP_FPM_PORT=${INVOICEPLANE_PHP_FPM_PORT:-9000}
}

invoiceplane_configure_debugging() {
  echo "Configuring InvoicePlane::Debugging"
  case $DEBUG in
    true) invoiceplane_set_param "ENABLE_DEBUG" "true" ;;
    *) invoiceplane_set_param "ENABLE_DEBUG" "false" ;;
  esac
}

invoiceplane_configure_url() {
  echo "Configuring InvoicePlane::URL"
  invoiceplane_set_param "IP_URL" "${INVOICEPLANE_URL}"
}

invoiceplane_configure_proxy_ips() {
  echo "Configuring InvoicePlane::Proxy IPS"
  sed -i "s|^\$config\['proxy_ips'\][ ]*=.*;|\$config\['proxy_ips'\] = '"$INVOICEPLANE_PROXY_IPS"';|" ${INVOICEPLANE_CODEIGNITER_CONFIG}
}

invoiceplane_configure_database() {
  echo -n "Configuring InvoicePlane::database"
  invoiceplane_finalize_database_parameters
  invoiceplane_check_database_connection
  invoiceplane_set_param "DB_HOSTNAME" "${DB_HOST}"
  invoiceplane_set_param "DB_PORT" "${DB_PORT}"
  invoiceplane_set_param "DB_USERNAME" "${DB_USER}"
  invoiceplane_set_param "DB_PASSWORD" "${DB_PASS}" "true"
  invoiceplane_set_param "DB_DATABASE" "${DB_NAME}"
}

invoiceplane_configure_timezone() {
  update_template ${INVOICEPLANE_INSTALL_DIR}/.user.ini INVOICEPLANE_TIMEZONE
}

nginx_configure_virtualhost() {
  echo "Configuring InvoicePlane virtualhost..."
  invoiceplane_finalize_php_fpm_parameters
  update_template ${INVOICEPLANE_NGINX_CONFIG} \
    INVOICEPLANE_FQDN \
    INVOICEPLANE_HTTPS \
    INVOICEPLANE_PHP_FPM_HOST \
    INVOICEPLANE_PHP_FPM_PORT
}

backup_dump_database() {
  echo "Dumping MySQL database ${DB_NAME}..."
  MYSQL_PWD=${DB_PASS} mysqldump --lock-tables --add-drop-table \
    --host ${DB_HOST} --port ${DB_PORT} \
    --user ${DB_USER} ${DB_NAME} > ${INVOICEPLANE_BACKUPS_DIR}/database.sql
  chown ${INVOICEPLANE_USER}: ${INVOICEPLANE_BACKUPS_DIR}/database.sql
  exec_as_invoiceplane gzip -f ${INVOICEPLANE_BACKUPS_DIR}/database.sql
}

backup_dump_directory() {
  local directory=${1}
  local dirname=$(basename ${directory})
  local extension=${2}

  echo "Dumping ${dirname}..."
  exec_as_invoiceplane tar -cf ${INVOICEPLANE_BACKUPS_DIR}/${dirname}${extension} -C ${directory} .
}

backup_dump_information() {
  (
    echo "info:"
    echo "  invoiceplane_version: ${INVOICEPLANE_VERSION}"
    echo "  database_adapter: mysqli"
    echo "  created_at: $(date)"
  ) > ${INVOICEPLANE_BACKUPS_DIR}/backup_information.yml
  chown ${INVOICEPLANE_USER}: ${INVOICEPLANE_BACKUPS_DIR}/backup_information.yml
}

backup_create_archive() {
  local tar_file="$(date +%s)_invoiceplane_backup.tar"

  echo "Creating backup archive: ${tar_file}..."
  exec_as_invoiceplane tar -cf ${INVOICEPLANE_BACKUPS_DIR}/${tar_file} -C ${INVOICEPLANE_BACKUPS_DIR} $@
  exec_as_invoiceplane chmod 0755 ${INVOICEPLANE_BACKUPS_DIR}/${tar_file}

  for f in $@
  do
    exec_as_invoiceplane rm -rf ${INVOICEPLANE_BACKUPS_DIR}/${f}
  done
}

backup_purge_expired() {
  if [[ ${INVOICEPLANE_BACKUPS_EXPIRY} -gt 0 ]]; then
    echo -n "Deleting old backups... "
    local removed=0
    local now=$(date +%s)
    local cutoff=$(expr ${now} - ${INVOICEPLANE_BACKUPS_EXPIRY})
    for backup in $(ls ${INVOICEPLANE_BACKUPS_DIR}/*_invoiceplane_backup.tar)
    do
      local timestamp=$(stat -c %Y ${backup})
      if [[ ${timestamp} -lt ${cutoff} ]]; then
        rm ${backup}
        removed=$(expr ${removed} + 1)
      fi
    done
    echo "(${removed} removed)"
  fi
}

backup_restore_unpack() {
  local backup=${1}
  echo "Unpacking ${backup}..."
  tar xf ${INVOICEPLANE_BACKUPS_DIR}/${backup} -C ${INVOICEPLANE_BACKUPS_DIR}
}

backup_restore_validate() {
  eval $(parse_yaml ${INVOICEPLANE_BACKUPS_DIR}/backup_information.yml backup_)

  ## version check
  if [[ $(vercmp ${INVOICEPLANE_VERSION} ${backup_info_invoiceplane_version}) -lt 0 ]]; then
    echo
    echo "ERROR: "
    echo "  Cannot restore backup for version ${backup_info_invoiceplane_version} on a ${INVOICEPLANE_VERSION} instance."
    echo "  You can only restore backups generated for versions <= ${INVOICEPLANE_VERSION}."
    echo "  Please use sameersbn/invoiceplane:${backup_info_invoiceplane_version} to restore this backup."
    echo "  Cannot continue. Aborting!"
    echo
    return 1
  fi
  exec_as_invoiceplane rm -rf ${INVOICEPLANE_BACKUPS_DIR}/backup_information.yml
}

backup_restore_database() {
  echo "Restoring MySQL database..."
  gzip -dc ${INVOICEPLANE_BACKUPS_DIR}/database.sql.gz | \
    MYSQL_PWD=${DB_PASS} mysql \
      --host ${DB_HOST} --port ${DB_PORT} \
      --user ${DB_USER} ${DB_NAME}
  exec_as_invoiceplane rm -rf ${INVOICEPLANE_BACKUPS_DIR}/database.sql.gz
}

backup_restore_directory() {
  local directory=${1}
  local dirname=$(basename ${directory})
  local extension=${2}

  echo "Restoring ${dirname}..."
  files=($(shopt -s nullglob;shopt -s dotglob;echo ${directory}/*))
  if [[ ${#files[@]} -gt 0 ]]; then
    exec_as_invoiceplane mv ${directory} ${directory}.$(date +%s)
  else
    exec_as_invoiceplane rm -rf ${directory}
  fi
  exec_as_invoiceplane mkdir -p ${directory}
  exec_as_invoiceplane tar -xf ${INVOICEPLANE_BACKUPS_DIR}/${dirname}${extension} -C ${directory}
  exec_as_invoiceplane rm -rf ${INVOICEPLANE_BACKUPS_DIR}/${dirname}${extension}
}

initialize_datadir() {
  echo "Initializing datadir..."
  chmod 0755 ${INVOICEPLANE_DATA_DIR}
  chown ${INVOICEPLANE_USER}: ${INVOICEPLANE_DATA_DIR}

  # initialize configs directory
  mkdir -p ${INVOICEPLANE_CONFIGS_DIR}
  chmod 0755 ${INVOICEPLANE_CONFIGS_DIR}
  chown -R ${INVOICEPLANE_USER}: ${INVOICEPLANE_CONFIGS_DIR}

  # initialize uploads directory
  if [[ ! -d ${INVOICEPLANE_UPLOADS_DIR} ]]; then
    cp -a ${INVOICEPLANE_INSTALL_DIR}/uploads.template ${INVOICEPLANE_UPLOADS_DIR}
  fi
  rm -rf ${INVOICEPLANE_INSTALL_DIR}/uploads
  ln -sf ${INVOICEPLANE_UPLOADS_DIR} ${INVOICEPLANE_INSTALL_DIR}/uploads

  mkdir -p ${INVOICEPLANE_UPLOADS_DIR}/customer_files
  chmod 0750 ${INVOICEPLANE_UPLOADS_DIR}/customer_files

  mkdir -p ${INVOICEPLANE_UPLOADS_DIR}/temp/mpdf
  chmod 0750 ${INVOICEPLANE_UPLOADS_DIR}/temp/mpdf

  chown -R ${INVOICEPLANE_USER}: ${INVOICEPLANE_UPLOADS_DIR}

  # initialize invoice template directory
  if [[ ! -d ${INVOICEPLANE_DOCUMENT_TEMPLATES} ]]; then
    mkdir -p ${INVOICEPLANE_DOCUMENT_TEMPLATES}
    cp -a ${INVOICEPLANE_INSTALL_DIR}/application/views/invoice_templates.template ${INVOICEPLANE_DOCUMENT_TEMPLATES}/invoice_templates
    cp -a ${INVOICEPLANE_INSTALL_DIR}/application/views/quote_templates.template ${INVOICEPLANE_DOCUMENT_TEMPLATES}/quote_templates
  fi
  rm -rf ${INVOICEPLANE_INSTALL_DIR}/application/views/invoice_templates ${INVOICEPLANE_INSTALL_DIR}/application/views/quote_templates
  ln -sf ${INVOICEPLANE_DOCUMENT_TEMPLATES}/invoice_templates ${INVOICEPLANE_INSTALL_DIR}/application/views/invoice_templates
  ln -sf ${INVOICEPLANE_DOCUMENT_TEMPLATES}/quote_templates ${INVOICEPLANE_INSTALL_DIR}/application/views/quote_templates

  chmod 0750 ${INVOICEPLANE_DOCUMENT_TEMPLATES}/invoice_templates ${INVOICEPLANE_DOCUMENT_TEMPLATES}/quote_templates
  chown -R ${INVOICEPLANE_USER}: ${INVOICEPLANE_DOCUMENT_TEMPLATES}

  CURRENT_VERSION=
  [[ -f ${INVOICEPLANE_DATA_DIR}/VERSION ]] && CURRENT_VERSION=$(cat ${INVOICEPLANE_DATA_DIR}/VERSION)
  if [[ ${INVOICEPLANE_VERSION} != ${CURRENT_VERSION} ]]; then
    echo -n "${INVOICEPLANE_VERSION}" > ${INVOICEPLANE_DATA_DIR}/VERSION
  fi

  # create backups directory
  mkdir -p ${INVOICEPLANE_BACKUPS_DIR}
  chmod -R 0755 ${INVOICEPLANE_BACKUPS_DIR}
  chown -R ${INVOICEPLANE_USER}: ${INVOICEPLANE_BACKUPS_DIR}
}

install_configuration_templates() {
  echo "Installing configuration templates..."
  if [[ ! -f ${INVOICEPLANE_CONFIG} ]]; then
    if [[ -f ${INVOICEPLANE_DATA_DIR}/ipconfig.php ]]; then
      # backward compatibility == 1.5.4
      mv ${INVOICEPLANE_DATA_DIR}/ipconfig.php ${INVOICEPLANE_CONFIG}
    else
      install_template ${INVOICEPLANE_USER}: invoiceplane/ipconfig.php ${INVOICEPLANE_CONFIG} 0640
    fi
  fi
  ln -sf ${INVOICEPLANE_CONFIG} ${INVOICEPLANE_INSTALL_DIR}/ipconfig.php

  if [[ -d /etc/nginx/sites-enabled && ! -f ${INVOICEPLANE_NGINX_CONFIG} ]]; then
    install_template root: nginx/InvoicePlane.conf ${INVOICEPLANE_NGINX_CONFIG} 0644
    update_template ${INVOICEPLANE_NGINX_CONFIG} INVOICEPLANE_INSTALL_DIR
  fi
}

initialize_system() {
  initialize_datadir
  install_configuration_templates
}

configure_invoiceplane() {
  echo "Configuring InvoicePlane..."
  invoiceplane_configure_debugging
  invoiceplane_configure_url
  invoiceplane_configure_proxy_ips
  invoiceplane_configure_database
  invoiceplane_configure_timezone
}

configure_nginx() {
  echo "Configuring nginx..."
  nginx_configure_virtualhost
}

backup_create() {
  echo -n "Checking database connection"
  invoiceplane_finalize_database_parameters
  invoiceplane_check_database_connection

  backup_dump_database
  backup_dump_directory ${INVOICEPLANE_CONFIGS_DIR} .tar.gz
  backup_dump_directory ${INVOICEPLANE_UPLOADS_DIR} .tar.gz
  backup_dump_information
  backup_create_archive backup_information.yml database.sql.gz configs.tar.gz uploads.tar.gz
  backup_purge_expired
}

backup_restore() {
  local tar_file=
  local interactive=true
  for arg in $@
  do
    if [[ $arg == BACKUP=* ]]; then
      tar_file=${arg##BACKUP=}
      interactive=false
      break
    fi
  done

  # user needs to select the backup to restore
  if [[ $interactive == true ]]; then
    num_backups=$(ls ${INVOICEPLANE_BACKUPS_DIR}/*_invoiceplane_backup.tar | wc -l)
    if [[ $num_backups -eq 0 ]]; then
      echo "No backups exist at ${INVOICEPLANE_BACKUPS_DIR}. Cannot continue."
      return 1
    fi

    echo
    for b in $(ls ${INVOICEPLANE_BACKUPS_DIR} | grep _invoiceplane_backup.tar | sort -r)
    do
      echo "‣ $b (created at $(date --date="@${b%%_invoiceplane_backup.tar}" +'%d %b, %G - %H:%M:%S %Z'))"
    done
    echo

    read -p "Select a backup to restore: " tar_file

    if [[ -z ${tar_file} ]]; then
      echo "Backup not specified. Exiting..."
      return 1
    fi
  fi

  if [[ ! -f ${INVOICEPLANE_BACKUPS_DIR}/${tar_file} ]]; then
    echo "Specified backup does not exist. Aborting..."
    return 1
  fi

  echo -n "Checking database connection"
  invoiceplane_finalize_database_parameters
  invoiceplane_check_database_connection

  backup_restore_unpack ${tar_file}
  backup_restore_validate
  backup_restore_database
  backup_restore_directory ${INVOICEPLANE_CONFIGS_DIR} .tar.gz
  backup_restore_directory ${INVOICEPLANE_UPLOADS_DIR} .tar.gz
}
